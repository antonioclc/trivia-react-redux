{"version":3,"sources":["pages/trivia.png","serviceWorker.js","actions/index.js","reducer/playerReducer.js","reducer/questionsReduce.js","reducer/index.js","store/index.js","pages/Configurations.js","pages/Login.js","components/Header.js","pages/Trivia.js","pages/Feedback.js","pages/Ranking.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","INITIAL_STATE","name","email","token","questions","points","answeredCorrectly","rootReducer","combineReducers","playerReducer","state","action","type","payload","questionsReduce","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","Configurations","data-testid","Component","Login","disableBtn","handleChange","bind","handleSubmit","resetData","this","props","localStorage","removeItem","target","value","setState","validateInfos","history","push","nameValid","emailValid","length","event","a","preventDefault","storageObj","player","assertions","score","gravatarEmail","setItem","JSON","stringify","dispatchSetValue","dispatchTokenThunk","clearInputs","className","onSubmit","src","trivia","htmlFor","id","placeholder","onChange","disabled","onClick","configurationRedirect","connect","dispatch","fetch","then","response","json","data","saveQuestions","Header","gravatar","cryptoString","stringConverted","md5","toString","alt","Trivia","answered","answersArr","firstTime","correctAnswer","questionIndex","seconds","difficulty","getAnswers","shuffleArray","handleAnswerClick","setClassname","nextQuestion","_prevProps","prevState","answeredOrTimeout","timerID","setInterval","answer","map","index","key","clearInterval","arr","i","j","Math","floor","random","setPoints","setSuccess","getObjPlayer","parse","getItem","questionPoints","easy","medium","hard","totalPoints","Number","answersArray","incorrect_answers","correct_answer","setTimer","nextButton","category","question","results","numberOfSuccess","Feedback","playAgain","showRanking","playerData","previewRanking","updatedRanking","totalScore","feedbackMessageGenerator","Ranking","goHome","renderRanking","sort","b","App","exact","path","component","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63376865.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SET_USER_DATA = 'SET_USER_DATA';\nexport const SAVE_TOKEN_DATA = 'SAVE_TOKEN_DATA';\nexport const SAVE_QUESTIONS_DATA = 'SAVE_QUESTIONS_DATA';\nexport const UPDATE_POINTS = 'UPDATE_POINTS';\nexport const UPDATE_SUCCESS = 'UPDATE_SUCCESS';\nexport const RESET_PLAYER = 'RESET_PLAYER';\n\nexport const saveToken = (payload) => ({\n  type: SAVE_TOKEN_DATA,\n  payload,\n});\n\n// função abaixo dispatcha obj com token\n\nexport const saveQuestions = (payload) => ({\n  type: SAVE_QUESTIONS_DATA,\n  payload,\n});\n\nexport function getTokenThunk() {\n  const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n  return (dispatch) => (\n    fetch(TOKEN_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(saveToken(data));\n        localStorage.setItem('token', JSON.stringify(data));\n        fetch(`https://opentdb.com/api.php?amount=5&token=${data.token}`)\n          .then((response) => response.json())\n          .then((questions) => dispatch(saveQuestions(questions)));\n      })\n  );\n}\n\nexport const setUserData = (payload) => ({\n  type: SET_USER_DATA,\n  payload,\n});\n\nexport const updatePoints = (payload) => ({\n  type: UPDATE_POINTS,\n  payload,\n});\n\nexport const updateSuccess = () => ({\n  type: UPDATE_SUCCESS,\n});\n\nexport const resetPlayer = () => ({\n  type: RESET_PLAYER,\n});\n","import { SET_USER_DATA, SAVE_TOKEN_DATA, SAVE_QUESTIONS_DATA,\n  UPDATE_POINTS, UPDATE_SUCCESS, RESET_PLAYER } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: {},\n  questions: {},\n  points: 0,\n  answeredCorrectly: 0,\n};\n\nexport default function playerReducer(state = INITIAL_STATE, action) {\n  const { answeredCorrectly } = state;\n  switch (action.type) {\n  case SET_USER_DATA:\n    return {\n      ...state,\n      name: action.payload.name,\n      email: action.payload.email,\n    };\n  case SAVE_TOKEN_DATA:\n    return {\n      ...state,\n      token: action.payload,\n    };\n  case SAVE_QUESTIONS_DATA:\n    return {\n      ...state,\n      questions: action.payload,\n    };\n  case UPDATE_POINTS:\n    return {\n      ...state,\n      points: action.payload,\n    };\n  case UPDATE_SUCCESS:\n    return {\n      ...state,\n      answeredCorrectly: answeredCorrectly + 1,\n    };\n  case RESET_PLAYER:\n    return INITIAL_STATE;\n  default: return state;\n  }\n}\n","import { SAVE_QUESTIONS_DATA } from '../actions';\n\nconst INITIAL_STATE = {\n  questions: {},\n};\n\nexport default function questionsReduce(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_QUESTIONS_DATA:\n    return {\n      ...state,\n      questions: action.payload,\n    };\n  default: return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport playerReducer from './playerReducer';\nimport questionsReduce from './questionsReduce';\n\nconst rootReducer = combineReducers({ playerReducer, questionsReduce });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducer';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\n\nclass Configurations extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">\n          Configurações\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default Configurations;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setUserData, getTokenThunk, resetPlayer } from '../actions';\nimport trivia from './trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n      disableBtn: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { resetData } = this.props;\n    resetData();\n    localStorage.removeItem('state');\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    }, () => this.validateInfos());\n  }\n\n  clearInputs() {\n    this.setState({\n      name: '',\n      email: '',\n    });\n  }\n\n  configurationRedirect() {\n    const { history } = this.props;\n    history.push('/configurations');\n  }\n\n  validateInfos() {\n    const { name, email } = this.state;\n    let nameValid = false;\n    let emailValid = false;\n    if (name.length > 0) nameValid = true;\n    if (email.length > 0) emailValid = true;\n    if (emailValid && nameValid) {\n      this.setState({ disableBtn: false });\n    } else {\n      this.setState({ disableBtn: true });\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { name, email } = this.state;\n    // padrão do readme\n    const storageObj = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      } };\n    localStorage.setItem('state', JSON.stringify(storageObj));\n\n    const { dispatchSetValue, dispatchTokenThunk, history } = this.props;\n    dispatchSetValue({ name, email });\n    this.clearInputs();\n    await dispatchTokenThunk();\n    history.push('/trivia');\n  }\n\n  render() {\n    const { name, email, disableBtn } = this.state;\n    return (\n      <div className=\"container-form-login\">\n        <form className=\"form-login\" onSubmit={ this.handleSubmit }>\n          <img className=\"trivia-img\" src={ trivia } />\n          <label htmlFor=\"input-player-name\">\n            <p className=\"form-title\">Nome:</p>\n            <input\n              className=\"input-login\"\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              id=\"input-player-name\"\n              name=\"name\"\n              value={ name }\n              placeholder=\"Digite aqui seu nome\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"input-gravatar-email\">\n            <p className=\"form-title\">Email:</p>\n            <input\n              className=\"input-login\"\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              id=\"input-gravatar-email\"\n              name=\"email\"\n              value={ email }\n              placeholder=\"Digite aqui seu email\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            className=\"send-login\"\n            data-testid=\"btn-play\"\n            type=\"submit\"\n            id=\"btn-play\"\n            disabled={ disableBtn }\n          >\n            ▶ Jogar\n          </button>\n          <button\n            className=\"send-login\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ () => this.configurationRedirect() }\n          >\n            🔧 Configurações\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchSetValue: PropTypes.func.isRequired,\n  dispatchTokenThunk: PropTypes.func.isRequired,\n  resetData: PropTypes.func.isRequired,\n  history: PropTypes.shape().isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.playerReducer.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchSetValue: (state) => dispatch(setUserData(state)),\n  dispatchTokenThunk: () => dispatch(getTokenThunk()),\n  resetData: () => dispatch(resetPlayer()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gravatar: '',\n    };\n\n    this.cryptoString = this.cryptoString.bind(this);\n  }\n\n  componentDidMount() {\n    this.cryptoString();\n  }\n\n  cryptoString() {\n    const { email } = this.props;\n    const stringConverted = md5(email).toString();\n    this.setState({\n      gravatar: stringConverted,\n    });\n  }\n\n  render() {\n    const { name, points } = this.props;\n    const { gravatar } = this.state;\n    return (\n      <header className=\"header-container\">\n        <div className=\"header-user\">\n          <img\n            data-testid=\"header-profile-picture\"\n            src={ `https://www.gravatar.com/avatar/${gravatar}` }\n            alt=\"gravatarimg\"\n          />\n          <h2 data-testid=\"header-player-name\">{ name }</h2>\n        </div>\n        <h3 data-testid=\"header-score\">\n          Sua pontuação:\n          {' '}\n          { points }\n        </h3>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  points: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.playerReducer.email,\n  name: state.playerReducer.name,\n  points: state.playerReducer.points,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { updatePoints, updateSuccess } from '../actions';\n\nconst ONE_SECOND = 1000;\nconst TIME_LIMIT = 0;\nconst answeredOk = 'correct-answer';\n\nclass Trivia extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      answered: false,\n      answersArr: [],\n      firstTime: true,\n      correctAnswer: '',\n      questionIndex: 0,\n      seconds: 30,\n      difficulty: '',\n      assertions: 0,\n    };\n\n    this.getAnswers = this.getAnswers.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.setClassname = this.setClassname.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    // função que verifica se o temporizado zerou\n    const { seconds } = this.state;\n    if (prevState.seconds !== seconds) this.answeredOrTimeout();\n  }\n\n  setTimer() {\n    this.timerID = setInterval(() => {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  setClassname(answer) {\n    const { answered, correctAnswer } = this.state;\n    if (answered) {\n      return answer !== correctAnswer ? 'incorrect-answer' : answeredOk;\n    }\n    return '';\n  }\n\n  getAnswers() {\n    const { answersArr, correctAnswer, answered } = this.state;\n    const StrCorrectAnswer = answeredOk;\n    const allAnswers = answersArr\n      // .filter((answer) => answer !== correctAnswer)\n      .map((answer, index) => (\n        <button\n          type=\"button\"\n          name={ answer !== correctAnswer ? 'incorrect-answer' : StrCorrectAnswer }\n          key={ index }\n          data-testid={\n            answer !== correctAnswer ? `wrong-answer-${index}` : StrCorrectAnswer\n          }\n          onClick={ this.handleAnswerClick }\n          className={ this.setClassname(answer) }\n          disabled={ answered }\n        >\n          {answer}\n\n        </button>\n      ));\n    return allAnswers;\n  }\n\n  answeredOrTimeout() {\n    const { answered, seconds } = this.state;\n    if (seconds === TIME_LIMIT || answered) {\n      this.setState({ answered: true });\n      clearInterval(this.timerID);\n    }\n  }\n\n  // a função shuffleArray utilizamos do link: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/\n  shuffleArray(arr) {\n    // Loop em todos os elementos\n    for (let i = arr.length - 1; i > 0; i -= 1) {\n      // Escolhendo elemento aleatório\n      const j = Math.floor(Math.random() * (i + 1));\n      // Reposicionando elemento\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    // Retornando array com aleatoriedade\n    return arr;\n  }\n\n  handleAnswerClick({ target }) {\n    const { difficulty, seconds } = this.state;\n    // let scoreActual = getObjPlayer.player.score;\n    const { setPoints, points, setSuccess } = this.props;\n    if (target.name === 'correct-answer') {\n      // const previewPoints = localStorage.getItem('points') || 0;\n      const getObjPlayer = JSON.parse(localStorage.getItem('state'));\n      this.setState((prevState) => ({ assertions: prevState.assertions + 1 }));\n      const difficultyPoints = { easy: 1, medium: 2, hard: 3 };\n      const basicPoint = 10;\n      const questionPoints = basicPoint + (seconds * difficultyPoints[difficulty]);\n      const totalPoints = Number(points) + questionPoints;\n      getObjPlayer.player.score = totalPoints;\n      localStorage.setItem('state', JSON.stringify(getObjPlayer));\n      setPoints(totalPoints);\n      setSuccess();\n    }\n    this.setState({ answered: true });\n  }\n\n  nextQuestion() {\n    const { questions, history } = this.props;\n    const { questionIndex } = this.state;\n    clearInterval(this.timerID);\n    if (questionIndex < (questions.length - 1)) {\n      this.setState((prevState) => ({\n        questionIndex: prevState.questionIndex + 1,\n        answered: false,\n        firstTime: true,\n        seconds: 30,\n      }));\n    } else {\n      const { assertions } = this.state;\n      const getObjPlayer = JSON.parse(localStorage.getItem('state'));\n      getObjPlayer.player.assertions = assertions;\n      localStorage.setItem('state', JSON.stringify(getObjPlayer));\n      history.push('/feedback');\n    }\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { firstTime, questionIndex, seconds, difficulty, answered } = this.state;\n    if (questions && firstTime) {\n      const answersArray = [\n        ...questions[questionIndex].incorrect_answers,\n        questions[questionIndex].correct_answer];\n      this.setState({\n        answersArr: this.shuffleArray(answersArray),\n        firstTime: false,\n        correctAnswer: questions[questionIndex].correct_answer,\n        difficulty: questions[questionIndex].difficulty,\n      });\n      this.setTimer();\n    }\n\n    const nextButton = (\n      <button\n        className=\"trivia-next-btn\"\n        data-testid=\"btn-next\"\n        type=\"button\"\n        onClick={ this.nextQuestion }\n      >\n        {' '}\n        Próximo\n        {' '}\n\n      </button>);\n\n    return (\n      <div>\n        <Header />\n        <div className=\"trivia-container\">\n          {\n            questions && (\n              <>\n                <div className=\"trivia-category\">\n                  <p data-testid=\"question-category\">\n                    Categoria:\n                    {' '}\n                    {questions[questionIndex].category}\n                  </p>\n                  <p>\n                    Dificuldade:\n                    {' '}\n                    {difficulty}\n                  </p>\n                </div>\n                <p className=\"trivia-question\" data-testid=\"question-text\">{questions[questionIndex].question}</p>\n                <div className=\"trivia-answers\">\n                {this.getAnswers()}\n                </div>\n                <p className=\"trivia-timer\">{seconds}</p>\n                {answered && nextButton}\n              </>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  history: PropTypes.shape().isRequired,\n  setPoints: PropTypes.func.isRequired,\n  setSuccess: PropTypes.func.isRequired,\n  points: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  questions: state.playerReducer.questions.results,\n  points: state.playerReducer.points,\n  numberOfSuccess: state.playerReducer.answeredCorrectly,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPoints: (points) => dispatch(updatePoints(points)),\n  setSuccess: () => dispatch(updateSuccess()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n\n    this.playAgain = this.playAgain.bind(this);\n    this.showRanking = this.showRanking.bind(this);\n  }\n\n  componentDidMount() {\n    const playerData = JSON.parse(localStorage.getItem('state'));\n    const previewRanking = JSON.parse(localStorage.getItem('ranking')) || [];\n    const updatedRanking = JSON.stringify([...previewRanking, playerData]);\n    localStorage.setItem('ranking', updatedRanking);\n  }\n\n  feedbackMessageGenerator() {\n    const { numberOfSuccess } = this.props;\n    const MIN = 3;\n    if (numberOfSuccess < MIN) return 'Podia ser melhor...😓';\n    return 'Mandou bem! 😜';\n  }\n\n  playAgain() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  showRanking() {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { numberOfSuccess, totalScore } = this.props;\n    return (\n      <div>\n        <Header />\n        <div className=\"feedback-container\">\n          <h1 data-testid=\"feedback-text\">\n            {' '}\n            {\n              this.feedbackMessageGenerator()\n            }\n            {' '}\n\n          </h1>\n          <h3 data-testid=\"feedback-total-score\">\n            Pontuação:\n            {' '}\n            { totalScore }\n          </h3>\n          <h3 data-testid=\"feedback-total-question\">\n            Respostas certas:\n            {' '}\n            { numberOfSuccess }\n          </h3>\n          <div className=\"feedback-btn-container\">\n            <button\n              className=\"feedback-btn\"\n              data-testid=\"btn-play-again\"\n              type=\"button\"\n              onClick={ this.playAgain }\n            >\n              Jogar novamente\n            </button>\n            <button\n              className=\"feedback-btn\"\n              data-testid=\"btn-ranking\"\n              type=\"button\"\n              onClick={ this.showRanking }\n            >\n              Ver Ranking\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape().isRequired,\n  numberOfSuccess: PropTypes.number.isRequired,\n  totalScore: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  numberOfSuccess: state.playerReducer.answeredCorrectly,\n  totalScore: state.playerReducer.points,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.goHome = this.goHome.bind(this);\n    this.renderRanking = this.renderRanking.bind(this);\n  }\n\n  goHome() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  // const stringConverted = md5(email).toString();\n\n  // src={ `https://www.gravatar.com/avatar/${gravatar}` }\n\n  renderRanking() {\n    const players = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      players.sort((a, b) => b.player.score - a.player.score)\n        .map((player, index) => {\n          const { gravatarEmail, name, score } = player.player;\n          const stringConverted = md5(gravatarEmail).toString();\n          return (\n            <li key={ index } className=\"ranking-player\">\n              <p className=\"ranking-position-number\">{`${index + 1}º`}</p>\n              <img\n                src={ `https://www.gravatar.com/avatar/${stringConverted}` }\n                alt=\"gravatarimg\"\n              />\n              {' '}\n              <div className=\"ranking-player-name-and-score\">\n                <h2 className=\"ranking-player-name-and-score-text\" data-testid={ `player-name-${index}` }>{ name }</h2>\n                <p className=\"ranking-player-name-and-score-text\" data-testid={ `player-score-${index}` }>{ score } pontos</p>\n              </div>\n            </li>\n          );\n        })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"ranking-container\">\n        <h1 data-testid=\"ranking-title\">\n          🏆 Ranking 🏆\n        </h1>\n        <ol>\n          {\n            this.renderRanking()\n          }\n        </ol>\n        <button\n          className=\"ranking-btn\"\n          data-testid=\"btn-go-home\"\n          type=\"button\"\n          onClick={ this.goHome }\n        >\n          Ir para a Home\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape().isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Configurations from './pages/Configurations';\nimport Login from './pages/Login';\nimport Trivia from './pages/Trivia';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        component={ Login }\n      />\n      <Route\n        path=\"/trivia\"\n        component={ Trivia }\n      />\n      <Route\n        path=\"/configurations\"\n        component={ Configurations }\n      />\n      <Route\n        path=\"/feedback\"\n        component={ Feedback }\n      />\n      <Route\n        path=\"/ranking\"\n        component={ Ranking }\n      />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}